### Professional Guide to Fix the Pipex Project

This guide is designed to help you systematically address and improve your Pipex project by fixing specific issues, implementing missing features, and ensuring that the code adheres to high standards. The process is divided into stages, each focusing on a set of related tasks.

---

#### **1. Implement Redirection Functions**

**Objective:** Implement functions that correctly handle redirection of input and output for the Pipex project.

**Steps:**
- **Understand Redirection:** Review how input (`<`), output (`>`), and append (`>>`) redirection works in the shell.
- **Create Functions:**
  - **Input Redirection:** Create a function that opens a file for reading and redirects the file descriptor to `stdin` using `dup2()`.
  - **Output Redirection:** Create a function that opens a file for writing (or appending) and redirects the file descriptor to `stdout` using `dup2()`.
  - **Error Handling:** Ensure that each redirection function handles errors properly, returning meaningful error codes or messages.
- **Integrate with Pipex:** Modify the existing code to utilize these redirection functions where necessary.

**Priority:** High

---

#### **2. Fix `execve` Path and Arguments**

**Objective:** Correctly implement `execve` to execute the desired command with the correct path and arguments.

**Steps:**
- **Path Resolution:** Ensure that the `execve` function resolves the full path of the command using environment variables (e.g., `PATH`).
- **Argument Handling:** Prepare an array of arguments (`argv`) and pass them correctly to `execve`.
- **Error Handling:** If the command is not found or cannot be executed, handle the error gracefully, perhaps falling back to an error message.
- **Testing:** Write unit tests for path resolution and argument handling to ensure correctness.

**Priority:** High

---

#### **3. Change `environ` to Non-Global Struct**

**Objective:** Replace the global `environ` variable with a struct to manage environment variables more cleanly and safely.

**Steps:**
- **Define Struct:** Create a struct that will hold the environment variables, along with any metadata or state information needed.
- **Initialization:** Implement a function to initialize this struct with the current environment variables.
- **Access Methods:** Provide accessor methods to retrieve, set, or modify environment variables within this struct.
- **Replace Usage:** Replace all instances where `environ` is accessed directly with calls to these accessor methods.
- **Testing:** Ensure that the project continues to work as expected after replacing `environ`.

**Priority:** Medium

---

#### **4. Clean Up the Code**

**Objective:** Refactor the codebase to improve readability, maintainability, and adherence to coding standards.

**Steps:**
- **Remove Unused Code:** Identify and remove any code that is no longer needed.
- **Modularize:** Break down large functions into smaller, reusable components.
- **Consistent Naming:** Ensure that variable and function names are descriptive and consistent.
- **Comments and Documentation:** Add comments where necessary to explain complex logic. Consider adding or improving documentation.
- **Memory Management:** Review and improve memory allocation and deallocation to avoid leaks or corruption.

**Priority:** Medium

---

#### **5. Implement Rigorous Testing**

**Objective:** Develop a comprehensive testing suite to ensure that the Pipex project functions correctly under various conditions.

**Steps:**
- **Unit Tests:** Write unit tests for individual functions, especially for the new features like redirection and path resolution.
- **Integration Tests:** Create tests that simulate realistic usage scenarios to verify that different components work together as expected.
- **Edge Cases:** Identify and test edge cases, such as empty inputs, large files, or invalid commands.
- **Automate:** Set up automated testing to run these tests regularly, ensuring that any new changes don't introduce regressions.

**Priority:** High

---

#### **6. Implement Variable Expansion**

**Objective:** Implement variable expansion within the parser, ensuring that it is robust and reliable.

**Steps:**
- **Understand Expansion:** Review how variable expansion works in the shell, e.g., replacing `$VAR` with its value.
- **Parser Integration:** Modify the parser to recognize variables and replace them with their values.
- **Escape Sequences:** Handle escape sequences correctly to avoid unintended expansions.
- **Error Handling:** Implement error handling for cases where a variable does not exist.
- **Testing:** Test the variable expansion with various inputs to ensure accuracy.

**Priority:** Medium

---

#### **7. Norm Compliance**

**Objective:** Ensure that every function in the codebase complies with the Norm standards, particularly the 25-line limit per function.

**Steps:**
- **Review Functions:** Identify functions that exceed the 25-line limit or other Norm standards.
- **Refactor:** Break down larger functions into smaller ones without losing functionality or clarity.
- **Norm Check Tools:** Use tools like `norminette` to automatically check for Norm compliance.
- **Iterate:** Continually refine the code until all functions meet the required standards.

**Priority:** Medium

---

#### **8. Run Everything Through Claude for QA**

**Objective:** Use an advanced AI like Claude to identify potential missing cases, weak spots, or areas for improvement.

**Steps:**
- **Prepare the Codebase:** Ensure that the code is in a clean, compilable state.
- **Submit to Claude:** Use Claude to analyze the code for any possible improvements, bugs, or unhandled cases.
- **Review Feedback:** Carefully review the feedback and incorporate suggestions where appropriate.
- **Retest:** After making changes based on Claude's feedback, rerun your tests to ensure everything still works.

**Priority:** Low to Medium (useful as a final QA step)

---

#### **9. Think**

**Objective:** Regularly step back to evaluate your progress and think critically about the project’s direction.

**Steps:**
- **Periodic Reviews:** After completing major tasks, review the entire project to ensure everything aligns with the original goals and requirements.
- **Identify Gaps:** Look for any gaps in functionality, potential optimizations, or improvements that could be made.
- **Brainstorm Solutions:** If issues arise, take the time to think through possible solutions before diving into code.
- **Consult:** Consider discussing challenging problems with peers or mentors for additional perspectives.

**Priority:** High (ongoing process)

---

### Final Note
By following this guide, you will systematically address the issues and features outlined for the Pipex project. Prioritize tasks based on their impact on the project’s functionality and stability. Regular testing and code reviews are crucial to ensure that all changes are robust and that the project meets high-quality standards.